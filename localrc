alias mado='sudo -u meilleursagents'

export DISABLE_AUTO_TITLE='true'

export ANSIBLE_VAULT_PASSWORD_FILE=~/.vault_pass.txt
export GPG_TTY=$(tty)
export PGHOST=www-db-master.dev-internal.meilleursagents
export PGPORT=5432
export PGDATABASE=meilleursagents_dev
export PGUSER=meilleursagents
export MA_ENV=dev
export MA_INSTANCE=jonathanc
export MA_REPOSITORY=${HOME}/meilleursagents
export ENVIRONMENT=dev-server
export SECRET_KEY=aglakgjalkjj

export SSL_DISABLED=True
export SSL_ACTIVE=False

function switch_repo {
    rm ~/meilleursagents
    ln -s ~/$1  ~/meilleursagents && sudo service nginx restart
}

if ! [ -d "$HOME/apps" ] ; then
    mkdir $HOME/apps
fi

if [ -e "$HOME/meilleursagents" ] ; then
    for app in $(ls -d $HOME/meilleursagents/apps/*/ | cut -d/ -f6)
    do
        if ! [ -e "$HOME/apps/$(echo $app | tr '[:upper:]' '[:lower:]')" ] ; then
            ln -s $HOME/meilleursagents/apps/$app $HOME/apps/$(echo $app | tr '[:upper:]' '[:lower:]')
        fi
    done
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm

source /home/jonathanc/MA-Infra/tools/gssh/gssh.sh

nvm use 10

restart() {
    set -o shwordsplit
    local apps=(${@:-'www portfolio mediaapi marketapi geoapi mailapi indiceapi mypro myproapi followup partners profileapi pdfapi webanalytics barometre'})

    for i in ${apps[@]}; do
        echo "Restarting ${i}..."
        sudo systemctl restart "${i}"
    done
}

rebuild() {
    set -o shwordsplit
    local apps=(${@:-'www Portfolio MediaAPI MarketAPI GeoAPI MailAPI IndiceAPI MyPro MyProAPI FollowUp Partners ProfileAPI PdfAPI'})

    for i in ${apps[@]}; do
        local appName=$(ls "/home/${USER}/meilleursagents/apps/" | grep -i "${i}" | head -1)
        echo "Rebuilding ${appName}..."

        pushd "/home/${USER}/meilleursagents/apps/${appName}"

        make init-dev
        if [[ $(make -qp | grep build-assets | wc -l) -ge 1 ]]; then
            make build-assets
        fi

        popd

        restart "${appName:l}"
    done
}

logs() {
    local logs_path=""
    local apps=${@-}

    if [[ -n "${apps}" ]]; then
        for app in ${apps[@]}; do
            local app_logs_path="/var/log/ma/${app,,}.log"
            if [[ -e "${app_logs_path}" ]]; then
                logs_path="${logs_path} ${app_logs_path}"
            else
                echo "No log file for ${app}"
                return 1
            fi
        done
    else
        logs_path=/var/log/ma/*.log
    fi
    sudo tail -f ${logs_path}
}

logs_nginx() {
    local logs_path=""
    local apps=${@-}

    if [[ "${apps}" != "" ]]; then
        for app in ${apps[@]}; do
            local app_access_logs_path="/var/log/nginx/${app,,}.access.log"
            local app_error_logs_path="/var/log/nginx/${app,,}.error.log"
            if [[ -e "${app_access_logs_path}" ]] && [[ -e "${app_error_logs_path}" ]]; then
                logs_path="${logs_path} ${app_access_logs_path} ${app_error_logs_path}"
            fi
        done
    fi

    if [[ "${logs_path}" = "" ]]; then
        logs_path=/var/log/nginx/*.log
    fi

    sudo tail -f ${logs_path}
}

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/home/jonathanc/google-cloud-sdk/path.zsh.inc' ]; then . '/home/jonathanc/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/home/jonathanc/google-cloud-sdk/completion.zsh.inc' ]; then . '/home/jonathanc/google-cloud-sdk/completion.zsh.inc'; fi
